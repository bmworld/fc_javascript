{"version":3,"sources":["prototype.js","this.js","class.js","dataType_number.js","array.js","main.js"],"names":["bmworld","firstname","lastname","getFullname","sarah","neo","User","first","last","prototype","getFullName","hello","instance_bmworld","instance_sarah","instance_neo","window","name","StudyThis","normal","console","log","arrow","study_this","timer","timeout","setTimeout","timer_arrow","amy","User_prototypeVersion","firstName","lastName","user1","study_class","Vehicle","wheel","myVehicle","Bicycle","myBicycle","daughterBicicle","Car","license","myCar","pi","str","toFixed","integer","parseInt","float","parseFloat","numbers","fruits","a","forEach","fruit","index","b","map","id"],"mappings":"AICA,ADDA,ICCMiD,ADDAP,EAAE,GAAG,ECCE,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CDDhB,CCCuB,CAAP,ADAhB,CCAA;AACA,IAAMQ,MAAM,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,CAAf,EAEA;AACA,ADFA,AEHA,ALEA,ACFA,IEGMP,GAAG,GAAGD,EAAE,CAACE,OAAH,CAAW,CAAX,CAAZ,EACA;ACEA,ADDA,AHFA,ACFA;AIAA,ALIA,ACHA,IDGM5C,OAAO,GAAG;AIGhB,ADAA,AHFEC,ACDF,EDCEA,EIEIkD,ADAAN,AFHA7C,CGGC,GAAGkD,GDAG,AHFF,ACDE,EDCC,CIEE,ADAAJ,AFHA,CGGCM,EJHD,KIGN,ADAc,CCAC,ADAAT,GAAD,CAAxB,MCA0BU,KAAD,EAAQC,KAAR,EAAkB,CACzC;AACD,ADDD,AEPA,ALKEpD,ACDAc,CGEQ,CAAV,AJDEd,ACDAc,EGOF,ADJM+B,EFHA,EAAE,CEGG,CHFD,EGEIC,AHFF,ACFI,KDAA,KGIQ,CAACL,GAAD,CAAxB,EAA+B;ACK/B,ADHA,AHHExC,ACDAe,EDCAf,ACDAe,MAAM,EAAE,GDCG,EAAE,aCDO,UDCG;AIazB,ADTA,AETA,ALMI,ACDAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KDCF,ACDOJ,IAAjB,CDCef,CCFG,CACM,ODCxB,cAA4B,KAAKC,QAAjC,EADqB,CAErB;AIYJ,ADTA,AHFG,ACDA,GALa;AGkBhB,ADLA,AEdA,ALCgB,ACMdmB,CDNF,CCMEA,CDEF,ICFO,EAAE,iBAAM;AEQf,AFPIF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACJ,IAAjB,EADW,CACa;AGc5B,ADNA,AHLA,ACDG,IGYGuC,AJXAnD,CIWC,GAAG8C,CJXC,GAAG,EIWE,CAACM,GAAP,CAAW,UAACH,KAAD,EAAQC,KAAR;AAAA,ADLrB,AHLErD,ACXc,CAAhB,CDWEA,CCCF,MGSwC,EJV7B,EAAG,OADA;AIYZwD,ADLF,AHLEvD,ACCF,EDDEA,EIUAuD,EAAE,EAAEH,EJVI,EAAE,CIS4B,IJX1B;AIaZtC,ADLF,AHLEb,ACCF,EDDEA,EIUAa,IAAI,EAAEsC,GJVK,EAAE,uBAAU;AIQe,ADFxC,AHLI,ACEJ,GGKqB,kBJPP,KAAKrD,SAAf,cAA4B,KAAKC,QAAjC,EADqB,CAErB;AIMiB,AJLlB,CIKO,CAAV,EAKA;AJhBc,ACUd,CDVA,EASA,CCCMyB,GAAG,GAAG;AACVX,EAAAA,IAAI,EAAE,KADI;ADGZ,ACDEE,EAAAA,EDCIb,GAAG,CCDD,EDCI,ACDFL,OAAO,CAACkB,MAFN;ADIVjB,ACDAoB,EDCApB,ACDAoB,KAAK,EAAErB,EDCE,EAAG,GCDE,CAACqB,CDAL;AExBZ,AF0BEnB,ACLU,CAAZ,CDKEA,CCCF,ODDU,EAAE,OAFA;AEtBZ,AFyBEC,ACCF,EDDEA,WAAW,EAAE,uBAAU;AExBzB,AFyBI,qBAAU,KAAKF,SAAf,cAA4B,KAAKC,QAAjC,EADqB,CAErB;AEzBJ,AF0BG;AEzBH,AFmBY,CAAZ,EASA;AE3BA,AFmCA;AElCA,AFmCA;AElCA,AFmCA;AElCA;AACA,AFkCA,SAASI,IAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4B;AEhC5B,AFgC8B;AE/B9B,AFgCE,OAAKP,SAAL,GAAiBM,KAAjB;AE7BF,AF8BE,OAAKL,QAAL,GAAgBM,IAAhB;AE1BF,AF4BC,SE5BQoB,qBAAT,CAAgCrB,KAAhC,EAAuCC,IAAvC,EAA6C;AAC3C,OAAKqB,SAAL,GAAiBtB,KAAjB;AACA,AF4BFD,IAAI,CAACG,EE5BEqB,OF4BP,CE5BE,AF4BapB,GE5BIF,IAAjB,IF4BF,GAA6B,YAAY;AE1BxC,AF2BC,mBAAU,KAAKP,SAAf,cAA4B,KAAKC,QAAjC;AACD,CAFD;AExBA0B,qBAAqB,CAACnB,SAAtB,CAAgCC,WAAhC,GAA8C,YAAY;AACxD,AF2BFJ,IAAI,CAACG,SAAL,CAAeE,IE3BH,CF2BZ,GAAuB,CE3BNkB,SAAf,AF2BF,cE3B8B,KAAKC,QAAjC;AACD,AF4BD,CE9BA,GF8BMlB,gBAAgB,GAAG,IAAIN,IAAJ,CAAS,IAAT,EAAe,KAAf,CAAzB,EAAgD;;AE1BhD,AF2BA,IE3BMyB,AF2BAlB,KE3BK,GAAG,IAAIe,EF2BE,GAAG,IAAItB,IAAJ,CAAS,OE3BlB,AF2BS,CE3BiB,CF2BC,KAAlB,CAAvB,EAAiD,YE3BnC,EAAgD,sBAAhD,CAAd,EAEA;;AF0BA,IErBMA,AFqBAQ,YAAY,GAAG,IAAIR,IAAJ,CAAS,KAAT,EAAgB,OAAhB,CAArB,EAA+C;AEpB7C,AFsBF,gBEtBgBC,KAAd,EAAqBC,IAArB,EAA4B;AAAA,AFuB9B;AACA;AExBgC,AFyBhC;AExBI,AFyBJ,SEzBSqB,SAAL,GAAiBtB,KAAjB;AACA,AF8BJ,SE9BSuB,QAAL,GAAgBtB,IAAhB;AACD,AF8BH;AACA;AACA;AACA;AACA,WEhCE,uBAAe;AACb,AFgCJ,uBEhCc,KAAKqB,SAAf,cAA4B,KAAKC,QAAjC;AACD,AFgCH;AACA;AACA;AACA;AACA;AACA;AEhCA,AFiCA,IEjCME,WAAW,GAAG,IAAI1B,IAAJ,CAAU,IAAV,EAAgB,KAAhB,CAApB,EAEA;AACA,AF+BA;AE1BA,AF2BA;AE1BA,AF2BA;AE1BA;AF8BAS,MAAM,CAACC,IAAP,GAAc,eAAd;IE5BMiB,UACJ,iBAAajB,IAAb,EAAmBkB,KAAnB,EAA0B;AAAA,AF8B5B,SAASjB,SAAT,CAAoBD,IAApB,EAA0B;AACxB,OAAKA,IAAL,GAAYA,IAAZ;AE9BE,AF+BH,OE/BQA,IAAL,GAAYA,IAAZ;AACA,OAAKkB,KAAL,GAAaA,KAAb;AACD,AF8BHjB,SAAS,CAACR,SAAV,CAAoBS,MAApB,GAA6B,YAAY;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,IAAjB;AE5BF,AF6BC,CAFD,GE3BMmB,SAAS,GAAG,IAAIF,OAAJ,CAAa,MAAb,EAAqB,GAArB,CAAlB,EACA;;AF8BAhB,IE3BMmB,KF2BG,CAAC3B,SAAV,CAAoBY,KAApB,GAA4B,YAAM;AAChC,EAAA,KAAI,CAACL,IAAL,GAAY,oBAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACJ,IAAjB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,CAJD;AE1BE,mBAAaJ,IAAb,EAAmBkB,KAAnB,EAA0B;AAAA,AFiC5B,IAAMZ,UAAU,GAAG,IAAIL,SAAJ,CAAc,SAAd,CAAnB,EAEA;AACA;AEpC4B,6BACjBD,IADiB,EACXkB,KADW,GACH;AACrB,AFuCJ,IAAMX,KAAK,GAAG;AEtCX,AFuCDP,EAAAA,IAAI,EAAE,UADM;AAEZQ,EAAAA,OAAO,EAAE,mBAAY;AACnBC,IAAAA,UAAU,CAAC,YAAY;AACrBN,EE9CgBc,IF8ChBd,OAAO,CAACC,GAAR,CAAY,KAAKJ,IAAjB,EADqB,CACG;AACzB,KAFS,EAEP,IAFO,CAAV;AEvCJ,AF0CG,IE1CGqB,SAAS,GAAG,IAAID,OAAJ,CAAY,KAAZ,EAAkB,CAAlB,CAAlB;AACA,AFmCc,CAAd,EASA,CE5CME,eAAe,GAAG,IAAIF,OAAJ,CAAY,IAAZ,EAAiB,CAAjB,CAAxB,EAEA;AACA;AF8CA,IAAMV,WAAW,GAAG;AAClBV,EAAAA,EE5CIuB,EF4CA,EAAE,4CADY;AAElBf,EAAAA,OAAO,EAAE,mBAAY;AACnBC,IAAAA,UAAU,CAAC,YAAM,CACf;AACA;AACA;AEhDJ,AFiDG,KAJS,EAIP,IAJO,CAAV,GE7CWT,IAAb,EAAmBkB,KAAnB,EAA0BM,OAA1B,EAAmC;AAAA,AFkDlC;AARiB,CAApB;AE1CqC,AFqDrCd,WAAW,CAACF,OAAZ,IAAuB;;AEpDnB,+BAAOR,IAAP,EAAakB,KAAb;AACA,UAAKM,OAAL,GAAeA,OAAf;AAFiC;AAGlC;;;EAJeP;;AAOlB,IAAMQ,KAAK,GAAG,IAAIF,GAAJ,CAAQ,MAAR,EAAe,GAAf,EAAmB,IAAnB,CAAd,EACA","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["\n\n//////////////////////////////////////////\n// 생성자함수 (prototype)\n\nconst bmworld = {\n  firstname : 'bm',\n  lastname: 'kim',\n  getFullname: function(){\n    return `${this.firstname} ${this.lastname}`;\n    // return `${bmworld.firstname} ${bmworld.lastname}`; // this = 변수의 이름인거다.\n  }\n}\n// console.log(bmworld.getFullname());\n\nconst sarah = {\n  firstname : 'sarah',\n  lastname: 'seo',\n  getFullname: function(){\n    return `${this.firstname} ${this.lastname}`;\n    // return `${bmworld.firstname} ${bmworld.lastname}`; // this = 변수의 이름인거다.\n  }\n}\n\n// console.log(sarah.getFullname());\n\n\n\nconst neo = {\n  firstname : 'Neo',\n  lastname: 'smith',\n  getFullname: function(){\n    return `${this.firstname} ${this.lastname}`;\n    // return `${bmworld.firstname} ${bmworld.lastname}`; // this = 변수의 이름인거다.\n  }\n}\n\n// console.log(neo.getFullname());\n\n\n\n\n\n \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// 생성자 함수\nfunction User (first, last ){ // 생성자 함수일경우 pascal Case로 사용해주는 것이 JS개발자들의 관행이다.\n  this.firstname = first; \n  this.lastname = last;\n\n}\n\nUser.prototype.getFullName = function () {\n  return `${this.firstname} ${this.lastname}`;\n}\n\nUser.prototype.hello = 'Hello~~~';\n\nconst instance_bmworld = new User('bm', 'kim'); // 생성자함수 new를 사영하여 인스턴스를 생성한다.\nconst instance_sarah = new User('sarah', 'seo'); // 생성자함수 new를 사영하여 인스턴스를 생성한다.\nconst instance_neo = new User('neo', 'smith'); // 생성자함수 new를 사영하여 인스턴스를 생성한다.\n\n// console.log(instance_bmworld);\n// console.log(instance_bmworld.getFullName());\n// console.log(instance_sarah);\n// console.log(instance_neo);\n// console.log(instance_neo.hello);\n\n\n\n\n\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////  this 활용  ////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n//////////////////////// 일반함수와 화살표함수가 가리키는 THIS는 서로 다르기 때문에, 상황에 맞게 사용하는 방법을 익히시라.\n// 일반(Normal)함수는 호출 위치에 따라 this정의!\n// 화살표(Arrow)함수는 자신이 선언(만들어진) 된 함수 범위 내에서 this 정의!\n\n\n\nwindow.name = 'window`s this';\n\n\nfunction StudyThis (name) {\n  this.name = name;\n}\nStudyThis.prototype.normal = function () {\n  console.log(this.name);\n}\n\nStudyThis.prototype.arrow = () => {\n  this.name = '이게 함수영역에서 선언한 this';\n  console.log(this.name);\n  console.log(this);\n}\n\n\nconst study_this = new StudyThis('bmworld');\n\n// study_this.normal();\n// study_this.arrow();\n\n\n\n\nconst timer = {\n  name: 'bmworld!',\n  timeout: function () {\n    setTimeout(function () {\n      console.log(this.name); // 1. 일반함수의 this는 '호출위치'에서 정의된다!\n    }, 1000);\n  }\n}\n\n// timer.timeout(); // 2. 즉 일반함수는 seTimeout가 실행되는 로직 어딘가에서 실행된다. 즉, 전역에서 호출되었다. 그래서 this는 전역 window를 가르킨다.\n\n\n\n\nconst timer_arrow = {\n  name: 'arrow함수의 this가 가르키는것은 timer_arrow인 객체{}다.!',\n  timeout: function () {\n    setTimeout(() => {\n      // console.log(this.name); // 화살표함수를 감싸고 있는 함수범위는 timeout이라는 메서드를 정의할 때 사용한 무명 함수(function(){})이고,\n      // 이 함수범위에서 this가 정의된 것다.\n      // 함수범위의 this는 일반함수(function(){})가 정의된 timer_arrow라는 객체{}를 가리킨다.\n    }, 1000);\n  }\n}\n\ntimer_arrow.timeout(); // 2. 즉 일반함수는 seTimeout가 실행되는 로직 어딘가에서 실행된다. 즉, 전역에서 호출되었다. 그래서 this는 전역 window를 가르킨다.","/// this\n// 일반(Normal)함수는 호출 위치에 따라 this정의!\n// 화살표(Arrow)함수는 자신이 선언(만들어진) 된 함수 범위 내에서 this 정의!\n\n\nconst bmworld = {\n  name: 'bm',\n  normal: function () {\n    console.log(this.name); // 이 위치에서는, 호출위치가 어딘지 모르기 때문에, this를 특정할 수 없다.\n\n  },\n  arrow: () => {\n    console.log(this.name); // 화살표함수는, 호출위치랑 전혀 상관없다 // 따라서 , 선언되는 위치에서 this가 무엇인지 바로 알 수 있다.\n\n  }\n}\n\n// bmworld.normal(); //\n// 메소드인 normal은 기본적으로 점표기법에 의해서 객체인 bmworld 내부에서 실행된다.\n// 메소드 normal에 딸려있고 거기에 의해서 실해오디기 때문에, bmworld가 곧 this이다. 그래서 console에서 this가 bmworld로 설정되어서 값을 할당할 수 있는 것이다.\n\n// bmworld.arrow(); // undefined\n\n\n\nconst amy = {\n  name: 'Amy',\n  normal: bmworld.normal,\n  arrow: bmworld.arrow,\n}\n\n// amy.normal();\n// amy.arrow();","\n\n\n\n//ES6 Classes\n\n// const study_class = {\n//   name: 'bmworld',\n//   normal() {\n//     console.log(this.name);\n//   },\n//   arrow: () =>{\n//     console.log(this.name)\n//   }\n// }\n\n// study_class.normal();\n// study_class.arrow(); // \n\n\n///// --- PROTOTYPE ---\n\n\n\nfunction User_prototypeVersion (first, last) {\n  this.firstName = first;\n  this.lastName  = last;\n\n}\n\nUser_prototypeVersion.prototype.getFullName = function () {\n  return `${this.firstName} ${this.lastName}`;\n}\n\nconst user1 = new User_prototypeVersion('bm_prototypeVersion','kim_prototypeVersion');\n\n// console.log(user1.getFullName());\n\n\n\n\nclass User {\n  constructor ( first, last ) { // constructor: 내부 함수function임\n    this.firstName = first;\n    this.lastName = last;\n  }\n\n  getFullName () {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\n\n\nconst study_class = new User ('bm', 'kim');\n\n// console.log(study_class);\n// console.log(study_class.getFullName());\n\n\n\n\n///////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////\n//////////////////// Class 상속 ////////////////////\n\nclass Vehicle {\n  constructor (name, wheel) {\n    this.name = name;\n    this.wheel = wheel;\n  }\n}\n\nconst myVehicle = new Vehicle ('운송수단', '2');\n// console.log(myVehicle);\n\n\nclass Bicycle extends Vehicle {\n  constructor (name, wheel) {\n    super (name, wheel); // super --> extends 키워드 뒤의 Vehicle 클래스를 의미한다.\n    // super 자리에서 Vehicle 클래스가 실행된다.\n  }\n}\nconst myBicycle = new Bicycle('삼천리',2);\nconst daughterBicicle = new Bicycle('세발',3);\n\n// console.log(myBicycle);\n// console.log(daughterBicicle);\n\n\nclass Car extends Vehicle {\n  constructor (name, wheel, license) {\n    super (name, wheel);\n    this.license = license\n  }\n}\n\nconst myCar = new Car('Jeep','4',true)\n// console.log(myCar);","const pi = 3.134514123123\n// console.log(pi);\n\nconst str = pi.toFixed(2);\n// console.log(str);\n// console.log(typeof str);\n\n\nconst integer = parseInt(str);\nconst float = parseFloat(str); // 소수점 자리 유지 + 숫자타입으로 변환\n\n// console.log(integer)\n// console.log(float)\n// console.log(typeof float, typeof integer);\n\n\n\n\n// console.log('abs: ', Math.abs(-12))\n// console.log('min: ', Math.min(2, 8))\n// console.log('max: ', Math.max(2, 8));\n// console.log('ceil: ', Math.ceil(3.14)); // 올림\n// console.log('floor: ', Math.floor(3.14)); // 내림\n// console.log('round: ', Math.round(3.5)); // 반올림\n// console.log('random: ', Math.random()); //","\nconst numbers = [1,2,3,4];\nconst fruits = ['apple', 'banana', 'cherry'];\n\n// const a = fruits.forEach(function (fruit, index) {\n//   console.log(`${fruit}-${index}`);\n// });\n\nconst a = fruits.forEach((fruit, index) => {\n  // console.log(`${fruit}-${index}`);\n});\n\n\n// foreach() 메서드는 배열반환 안 함\n// console.log('forEach():' , a);\n\n\n\n\n\n\n// const b = fruits.map(function (fruit, index) {\n//   return `${fruit}-${index}`;\n// }); \n\n\nconst b = fruits.map((fruit, index) => ({\n  id: index,\n  name: index\n})); \n\n// console.log('map(): ' , b); // map() 메서드는 기본적으로 \"새로운 배열을 반환\"함\n\n\n","import study_prototype from './prototype';\nimport study_this from './this';\nimport study_class from './class';\nimport study_Type_number from './dataType_number';\nimport study_array from './array';\n// import getType from './getType';\n\n// console.log(getType(1234));\n// console.log(getType(false));\n// console.log(getType(null));\n// console.log(getType({}));\n// console.log(getType([]));\n\n\n\n\n\n// // 산술 연산자 (arithmetic operator)\n\n// console.log(1 + 2)\n// console.log(5 - 7)\n// console.log(3 * 3)\n// console.log(10 / 2 )\n// console.log(7 % 2 )\n\n\n// // 할당 연산자 (assignment operator)\n// let a = 2\n// a -= 1; // a = a - 1\n// console.log(a);\n// a += 1; // a = a + 1\n// console.log(a);\n\n\n\n// // 비교 연산자 (comparison operator)\n\n// const c = 1;\n// const d = 3;\n// console.log(c === d);\n// console.log(c !== d);\n// console.log(c < d);\n\n\n\n// // 논리 연산자 (logical operator)\n\n// const e = 1 === 1;\n// const f = 'AB' === 'AB';\n// const g = true;\n\n// console.log(e);\n// console.log(f);\n// console.log(g);\n\n\n\n// console.log('&&: ', e && f && g);\n// console.log('||: ', e || f);\n\n\n\n\n\n// import random from './getRandom';\n\n// // 조건문 (if Statement)\n\n// const a = random();\n\n\n// switch(a){\n//   case 0:\n//     console.log('a is 0');\n//     break; // break를 안 걸었을 경우, 아래의 명령문이 실행됨.\n//   case 2:\n//     console.log('a is 2');\n//     break;\n//   case 4:\n//     console.log('a is 4');\n//     break;\n\n//   default:\n//     console.log('rest...') // else의 나머지 조건에 해당하는 거다. break문 필요없음.\n// }\n\n\n// if( a === 0 ){\n//   console.log('a is 0');\n// } else if ( a === 2) {\n//   console.log('a is 2');\n// } else if ( a === 4) {\n//   console.log('a is 4');\n// } else {\n//   console.log('rest..')\n// }\n\n\n\n// const ulElem = document.querySelector('ul');\n\n// for( let i =0; i < 3; i += 1){\n//   const li = document.createElement('li');\n//   li.textContent = `list-${i + 10}`;\n//   ulElem.appendChild(li);\n\n// }\n\n\n// 변수 유효범위 (Variable Scrope)\n// 함수레벨: var\n// 블록레벨: let, const\n\n// function scope(){\n  \n//   if (true){\n//     var a = 123;\n//     console.log(a);\n//   }\n \n// }\n\n\n// scope();\n\n\n\n\n// 화살표함수\n\n// const doubleArrow = x => {x * 2}; // 중괄호를 사용할 경우에, return 키워드를 사용해야 반환된다.\n// const doubleArrow = x => x * 2; //  화살표함수는, 중괄호가 없을 경우, 값반환을 기본적으로 한다.\n// console.log('doubleArrow: ', doubleArrow(7));\n// const doubleArrow2 = x => ({\n//   name: 'bmworld',\n//   age: '33',\n//   value: x*7\n// }); //  화살표함수는, 중괄호가 없을 경우, 값반환을 기본적으로 한다.\n// console.log('doubleArrow: 화살표함수는 객체를 반환할 때는 소괄호기호를 사용하면 된다. ', doubleArrow2(7));\n\n\n\n\n\n\n\n\n\n/// 기본함수\n\n// const k = 7;\n// function double(){\n//   console.log( k * 2);\n\n// }\n\n// double();\n\n\n\n\n\n// 즉시 실행함수\n\n\n// (function(){\n//   console.log(k * 3);\n// })();\n\n\n\n\n// 호이스팅 (Hoisting)\n// 함수 선언부가 유효범위 최상단으로 끌어올려지는 현상\n\n\n\n// 콜백 (Callback)\n// 함수의 '인수'로 사용되는 함수\n\n// function timeout(callback) {\n//   setTimeout(()=>{\n//     console.log('bmworld!');\n//     callback();\n//   },1000);\n// }\n\n// timeout(()=>{\n//   console.log('callback done!')\n  \n// });\n\n\n"]}