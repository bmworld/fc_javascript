{"id":"main.js","dependencies":[{"name":"/Users/apple/git/fc_javascript/package.json","includedInParent":true,"mtime":1645923517109}],"generated":{"js":"var str = \"\\n010-1231-4123.\\nthehgello@gmail.com\\nhttps://www.omdbapi.com/?apikey=89e04afa&s=frozen\\nhttp://localhost:1234\\nhttsss://localhost:1234\\nhtstsss://localhost:1234\\nThe quick brown fox dog jumps theGold\\naabbbbbggdddddd\\nhxdp\\nd\"; // const regexp = new RegExp('the', 'gi');\n//g flag(옵션)를 사용하면, 검색된 문장을 'ARRAY'로 만들어준다\n//***i는 array로 반환하지 않는다 (대소문자 구분만 가능케하는 옵션)\n// console.log(str.match(regexp));\n\nvar regexp_literalMethod = /the/g; // console.log(str.match(regexp_literalMethod));\n\nvar regexp = /theGold/gi; // console.log(regexp.test(str));\n// console.log(str.replace(regexp, '바뀐 부분이다')) // 원본데이터를 손상시키지 않는다.\n// console.log(str)\n// str = str.replace(regexp, '바뀐 부분이다');\n// console.log(str.match(/\\.$/gim)) \n// $ : 문자가 끝나는 위치까지 찾는다\n// console.log(str.match(/h..p/g)) // h(임의의문자)(임의의문자)p\n// console.log(str.match(/fox|dog/g)) //\n// console.log(str.match(/fox|dog/)) // g플래그가 없을 경우, 둘 중 먼저 찾아지는 것만 찾음\n// console.log(str.match(/dog|fox/)) //\n// console.log(str.match(/htt?p?/g)) //\n// console.log(str.match(/d{2,5}/g)) // 2개 이상 5개 이하 연속 일치\n\nconsole.log(str.match(/\\b\\w{2,3}\\b/g)); // \\w : 숫자 영어 알파벳 을 모두 검색\n// \\b : 숫자, 영어, 알파벳을 제외한 것을 '경계'로 만들어준다 --> 010-234 <==여기서는 하이픈(-)"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"main.js","original":{"line":4,"column":0}},{"name":"str","generated":{"line":1,"column":4},"source":"main.js","original":{"line":4,"column":4}},{"generated":{"line":1,"column":7},"source":"main.js","original":{"line":4,"column":7}},{"generated":{"line":1,"column":239},"source":"main.js","original":{"line":4,"column":0}},{"generated":{"line":1,"column":241},"source":"main.js","original":{"line":16,"column":0}},{"generated":{"line":2,"column":0},"source":"main.js","original":{"line":17,"column":0}},{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":18,"column":0}},{"generated":{"line":4,"column":0},"source":"main.js","original":{"line":19,"column":0}},{"generated":{"line":6,"column":0},"source":"main.js","original":{"line":22,"column":0}},{"name":"regexp_literalMethod","generated":{"line":6,"column":4},"source":"main.js","original":{"line":22,"column":6}},{"generated":{"line":6,"column":24},"source":"main.js","original":{"line":22,"column":26}},{"generated":{"line":6,"column":27},"source":"main.js","original":{"line":22,"column":29}},{"generated":{"line":6,"column":33},"source":"main.js","original":{"line":22,"column":0}},{"generated":{"line":6,"column":35},"source":"main.js","original":{"line":23,"column":0}},{"generated":{"line":8,"column":0},"source":"main.js","original":{"line":26,"column":0}},{"name":"regexp","generated":{"line":8,"column":4},"source":"main.js","original":{"line":26,"column":6}},{"generated":{"line":8,"column":10},"source":"main.js","original":{"line":26,"column":12}},{"generated":{"line":8,"column":13},"source":"main.js","original":{"line":26,"column":15}},{"generated":{"line":8,"column":24},"source":"main.js","original":{"line":26,"column":0}},{"generated":{"line":8,"column":26},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":9,"column":0},"source":"main.js","original":{"line":28,"column":0}},{"generated":{"line":10,"column":0},"source":"main.js","original":{"line":29,"column":0}},{"generated":{"line":11,"column":0},"source":"main.js","original":{"line":31,"column":0}},{"generated":{"line":12,"column":0},"source":"main.js","original":{"line":34,"column":0}},{"generated":{"line":13,"column":0},"source":"main.js","original":{"line":35,"column":0}},{"generated":{"line":14,"column":0},"source":"main.js","original":{"line":38,"column":0}},{"generated":{"line":15,"column":0},"source":"main.js","original":{"line":39,"column":0}},{"generated":{"line":16,"column":0},"source":"main.js","original":{"line":40,"column":0}},{"generated":{"line":17,"column":0},"source":"main.js","original":{"line":41,"column":0}},{"generated":{"line":18,"column":0},"source":"main.js","original":{"line":44,"column":0}},{"generated":{"line":19,"column":0},"source":"main.js","original":{"line":49,"column":0}},{"name":"console","generated":{"line":21,"column":0},"source":"main.js","original":{"line":50,"column":0}},{"generated":{"line":21,"column":7},"source":"main.js","original":{"line":50,"column":7}},{"name":"log","generated":{"line":21,"column":8},"source":"main.js","original":{"line":50,"column":8}},{"generated":{"line":21,"column":11},"source":"main.js","original":{"line":50,"column":0}},{"name":"str","generated":{"line":21,"column":12},"source":"main.js","original":{"line":50,"column":12}},{"generated":{"line":21,"column":15},"source":"main.js","original":{"line":50,"column":15}},{"name":"match","generated":{"line":21,"column":16},"source":"main.js","original":{"line":50,"column":16}},{"generated":{"line":21,"column":21},"source":"main.js","original":{"line":50,"column":12}},{"generated":{"line":21,"column":22},"source":"main.js","original":{"line":50,"column":22}},{"generated":{"line":21,"column":36},"source":"main.js","original":{"line":50,"column":12}},{"generated":{"line":21,"column":37},"source":"main.js","original":{"line":50,"column":0}},{"generated":{"line":21,"column":40},"source":"main.js","original":{"line":51,"column":0}},{"generated":{"line":22,"column":0},"source":"main.js","original":{"line":52,"column":0}}],"sources":{"main.js":"\n\n\nlet str = `\n010-1231-4123.\nthehgello@gmail.com\nhttps://www.omdbapi.com/?apikey=89e04afa&s=frozen\nhttp://localhost:1234\nhttsss://localhost:1234\nhtstsss://localhost:1234\nThe quick brown fox dog jumps theGold\naabbbbbggdddddd\nhxdp\nd`\n\n// const regexp = new RegExp('the', 'gi');\n//g flag(옵션)를 사용하면, 검색된 문장을 'ARRAY'로 만들어준다\n//***i는 array로 반환하지 않는다 (대소문자 구분만 가능케하는 옵션)\n// console.log(str.match(regexp));\n\n\nconst regexp_literalMethod = /the/g;\n// console.log(str.match(regexp_literalMethod));\n\n\nconst regexp = /theGold/gi;\n// console.log(regexp.test(str));\n// console.log(str.replace(regexp, '바뀐 부분이다')) // 원본데이터를 손상시키지 않는다.\n// console.log(str)\n\n// str = str.replace(regexp, '바뀐 부분이다');\n\n\n// console.log(str.match(/\\.$/gim)) \n// $ : 문자가 끝나는 위치까지 찾는다\n\n\n// console.log(str.match(/h..p/g)) // h(임의의문자)(임의의문자)p\n// console.log(str.match(/fox|dog/g)) //\n// console.log(str.match(/fox|dog/)) // g플래그가 없을 경우, 둘 중 먼저 찾아지는 것만 찾음\n// console.log(str.match(/dog|fox/)) //\n\n\n// console.log(str.match(/htt?p?/g)) //\n\n\n\n\n// console.log(str.match(/d{2,5}/g)) // 2개 이상 5개 이하 연속 일치\nconsole.log(str.match(/\\b\\w{2,3}\\b/g))\n// \\w : 숫자 영어 알파벳 을 모두 검색\n// \\b : 숫자, 영어, 알파벳을 제외한 것을 '경계'로 만들어준다 --> 010-234 <==여기서는 하이픈(-)"},"lineCount":null}},"error":null,"hash":"712343234ddd20bdaa2fd112fe0d3893","cacheData":{"env":{}}}